Motion Sensor MQTT Bridge Documentation
=====================================

What does this program do?
-------------------------
This program acts as a bridge between an Arduino motion sensor and an MQTT broker (like a message center). When the motion sensor detects movement, the program sends this information to the cloud where other devices can see it.

Main Components:
---------------
1. Arduino with Motion Sensor: Detects movement and sends messages
2. Python Bridge Program: Receives sensor data and sends to cloud
3. MQTT Broker (HiveMQ Cloud): Cloud service that handles messages

How it Works (Simple Flow):
--------------------------
1. Arduino detects motion → Sends message through USB
2. Python program reads message from USB
3. Python program formats message nicely
4. Message is sent to HiveMQ Cloud
5. Other devices can see the motion alerts

Messages We Handle:
------------------
1. "System Starting..." → System is booting up
2. "Sensor Ready!" → Sensor is ready to detect motion
3. "Sensor Reading: 1" → Motion detected
4. "Motion Detected!" → Confirms motion event

Message Format Sent to Cloud:
----------------------------
Example when motion is detected:
{
    "type": "sensor_reading",
    "value": 1,
    "status": "motion",
    "timestamp": "2024-01-22T12:34:56.789Z",
    "device_id": "securespace_bridge"
}

Security Features:
----------------
1. Secure connection (TLS/SSL) to MQTT broker
2. Username/password authentication
3. Exclusive access to USB port
4. Automatic port cleanup

Error Handling:
--------------
1. Retries if USB connection fails
2. Automatic cleanup of stuck USB connections
3. Reconnects if internet connection drops
4. Logs all events for troubleshooting

Setup Requirements:
-----------------
1. Arduino with motion sensor
2. Python 3.x installed
3. HiveMQ Cloud account
4. USB connection to Arduino

Configuration (.env file needs):
-----------------------------
MQTT_BROKER=your_broker_address
MQTT_PORT=8883
MQTT_USERNAME=your_username
MQTT_PASSWORD=your_password
MQTT_TOPIC=securespace/motion
SERIAL_PORT=/dev/cu.usbserial-1430

Real-World Usage Scenarios:
-------------------------
1. Home Security:
   - Place sensor at entrance
   - Get alerts when motion detected
   - Log all movements with timestamps

2. Store Counter:
   - Track customer entry/exit
   - Analyze busy hours
   - Monitor after-hours movement

3. Smart Office:
   - Automate lights based on movement
   - Track office occupancy
   - Security monitoring

4. Warehouse Monitoring:
   - Track movement in restricted areas
   - Monitor after-hours activity
   - Integration with security systems

Troubleshooting:
---------------
1. If USB port is busy:
   - Program will automatically try to fix
   - If fails, unplug and replug Arduino

2. If MQTT connection fails:
   - Check internet connection
   - Verify credentials in .env file
   - Make sure broker address is correct

3. If no data received:
   - Check Arduino is properly connected
   - Verify correct USB port in .env
   - Check Arduino code is uploaded and running

Logging:
--------
- All events are logged to 'motion_sensor.log'
- Includes connection status, errors, and motion events
- Helps in debugging issues

Future Improvements Possible:
---------------------------
1. Add multiple sensor support
2. Implement motion zones
3. Add camera integration
4. Create mobile app notifications
5. Add data analytics dashboard 